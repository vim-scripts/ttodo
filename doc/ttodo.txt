*ttodo.txt*         View, sort, and filter todo.txt files
                    Author: Tom Link, micathom at gmail com

This plugin provides the |:Ttodo| command that allow easy filtering and viewing 
of todo.txt files (see http://todotxt.com) via |tlib#input#List()|. The plugin 
supports searching across multiple todo.txt files.

Examples: >
    " Show all tasks; default map (|g:ttodo_nmap|): <Leader>1
    :Ttodo

    " Show important tasks; default map (|g:ttodo_nmap_important|): <Leader>!
    :Ttodo!

    " Show tasks that are due in the next two weeks
    :Ttodo --due=2w

    " Show tasks with priorities A to C
    :Ttodo --pri=A-C

    " Show tasks matching @Test
    :Ttodo @Test

In order to use this plugin as a ftplugin, the vikitasks_vim plugin should be 
installed. Users might also want to set |g:ttodo_enable_ftdetect| to 1 in their 
|vimrc| file.

If filetype is ttodo, the following default keymaps are enabled:

    <cr> ................. Add a new task;
                           if either |g:ttodo#ftplugin#add_at_eof| is true or 
                           the map was invoked with a count, add the task at 
                           the end of file
    <c-cr> ............... Add a new task; copy any list and tags from the 
                           current task;
                           if either |g:ttodo#ftplugin#add_at_eof| is true or 
                           the map was invoked with a count, add the task at 
                           the end of file

If vikitasks_vim is installed (see |g:ttodo#use_vikitasks|), the following maps 
are available too:

    <LocalLeader>tx ...... Mark done
    <LocalLeader>td ...... Mark due in N days
    <LocalLeader>tw ...... Mark due in N weeks
    <LocalLeader>tm ...... Mark due in N months
    <LocalLeader>tp ...... Set priority
    <LocalLeader>ta ...... Archive done items
    <LocalLeader>tn ...... Add a note (the filename uses the first @list tag)

As a ftplugin, ttodo (in conjunction with vikitasks) supports the following 
syntax/extensions to todo.txt (see also 
https://github.com/ginatrapani/todo.txt-cli/wiki/The-Todo.txt-Format):

    (A) .............. A priority as upper case letter (at the beginning of the 
                       line)
    x DATE text ...... A completed task (with completion date)
    @list ............ list tag
    +keyword ......... keyword tag
    due:YYYY-MM-DD ... due dates
    rec:+Nx .......... When marking a task a done, add a new task with a due 
                       date in N d(ays), w(eeks), m(onths), y(ears); with the 
                       leading '+' use the original due date; else use the 
                       completion date (see also 
                       |g:vikitasks#ft#todotxt#copy_rec_items|)
    t:YYYY-MM-DD ..... Hide the tasks until the given date
    t:-Nd ............ Hide the tasks until N days before the due date

Other ftplugin for todo.txt files, which can be used in conjunction with the 
ttodo plugin, include:

    - https://github.com/freitass/todo.txt-vim
        - todo-txt.vim : Vim plugin for Todo.txt 
          https://github.com/dbeniamine/todo.txt-vim or
          http://www.vim.org/scripts/script.php?script_id=5134
    - https://github.com/mivok/vimtodo or
      http://www.vim.org/scripts/script.php?script_id=3264
    - https://github.com/davidoc/todo.txt-vim
        - My fork: https://github.com/tomtom/todo.txt-vim-1
    - https://github.com/dsiroky/vim-todotxt
    - ...

Related work:
    - https://github.com/elentok/todo.vim


-----------------------------------------------------------------------
Install~

To install the vimball, edit the vba file and type: >

    :so %

See :help vimball for details.

To install from github, please use
    1. git + a plugin loader like enable_vim, pathogen, vim-unbundle etc.
    2. a plugin manager like VAM, Vundle, NeoBundle, vim-plug etc.

The tlib_vim plugin is required:
https://github.com/tomtom/tlib_vim

Optional enhancement:
- https://github.com/tomtom/vikitasks_vim for additional maps
- https://github.com/tomtom/autolinker_vim for hyperlinking

Also available via git: http://github.com/tomtom/ttodo_vim


Setup~

Please set |g:ttodo#dirs| in |vimrc| before using |:Ttodo|.


========================================================================
Contents~

        g:ttodo_nmap .......................... |g:ttodo_nmap|
        g:ttodo_nmap_important ................ |g:ttodo_nmap_important|
        g:ttodo_enable_ftdetect ............... |g:ttodo_enable_ftdetect|
        :Ttodo ................................ |:Ttodo|
        g:ttodo#dirs .......................... |g:ttodo#dirs|
        g:ttodo#file_pattern .................. |g:ttodo#file_pattern|
        g:ttodo#file_include_rx ............... |g:ttodo#file_include_rx|
        g:ttodo#file_exclude_rx ............... |g:ttodo#file_exclude_rx|
        g:ttodo#task_include_rx ............... |g:ttodo#task_include_rx|
        g:ttodo#task_exclude_rx ............... |g:ttodo#task_exclude_rx|
        g:ttodo#viewer ........................ |g:ttodo#viewer|
        g:ttodo#sort .......................... |g:ttodo#sort|
        g:ttodo#prefs ......................... |g:ttodo#prefs|
        g:ttodo#default_pri ................... |g:ttodo#default_pri|
        g:ttodo#default_due ................... |g:ttodo#default_due|
        g:ttodo#default_t ..................... |g:ttodo#default_t|
        g:ttodo#use_vikitasks ................. |g:ttodo#use_vikitasks|
        g:ttodo#mapleader ..................... |g:ttodo#mapleader|
        g:ttodo#debug ......................... |g:ttodo#debug|
        ttodo#ParseTask ....................... |ttodo#ParseTask()|
        ttodo#InitListBuffer .................. |ttodo#InitListBuffer()|
        ttodo#FiletypeDetect .................. |ttodo#FiletypeDetect()|
        g:ttodo#ftplugin#notef ................ |g:ttodo#ftplugin#notef|
        g:ttodo#ftplugin#note_prefix .......... |g:ttodo#ftplugin#note_prefix|
        g:ttodo#ftplugin#edit_note ............ |g:ttodo#ftplugin#edit_note|
        g:ttodo#ftplugin#add_at_eof ........... |g:ttodo#ftplugin#add_at_eof|
        ttodo#ftplugin#WithVikitasks .......... |ttodo#ftplugin#WithVikitasks()|
        ttodo#ftplugin#Archive ................ |ttodo#ftplugin#Archive()|
        ttodo#ftplugin#ArchiveCurrentBuffer ... |ttodo#ftplugin#ArchiveCurrentBuffer()|
        ttodo#ftplugin#Note ................... |ttodo#ftplugin#Note()|
        ttodo#ftplugin#New .................... |ttodo#ftplugin#New()|


========================================================================
plugin/ttodo.vim~

                                                    *g:ttodo_nmap*
g:ttodo_nmap                   (default: '<Leader>1')

                                                    *g:ttodo_nmap_important*
g:ttodo_nmap_important         (default: '<Leader>!')

                                                    *g:ttodo_enable_ftdetect*
g:ttodo_enable_ftdetect        (default: 0)
    Set this variable to 1 in |vimrc| in order to enable the ttodo 
    filetype for todo.txt files.

                                                    *:Ttodo*
:Ttodo[!] [ARGS] [INITIAL FILTER]

    ARGS is an argument list. The following arguments are supported:
      --pref=PREF ... PREF is the name of a preferences set in 
                      |g:ttodo#prefs| (default: "default")
      --due=DATE .... show only tasks with due dates >= DATE. DATE can be
                      - a DATE in the form YYYY-MM-DD or
                      - a number of days or
                      - a number of weeks as in "4w"
                      (default: |g:ttodo#default_due|)
      --pri=PRI ..... Show tasks with a priority matching [PRI] (see 
                      |/[]|)
      --undated ..... Show tasks with no due dates when using the due 
                      argument
      --done ........ Show done tasks
      --hidden ...... Show hidden tasks (h:1)
      --files=FILE1,FILE2... .. A comma-separated list of todo.txt files
      --path=PATH ... Search files in this path (default: use 
                      |g:ttodo#dirs|)
      --pattern=PAT . Search files matching this pattern (default: 
                      |g:ttodo#file_pattern|)
      --sort=FIELDS . default: |g:ttodo#sort|
      -A=RX, --file_include_rx=RX ... Default: |g:ttodo#file_include_rx|
      -R=RX, --file_exclude_rx=RX ... Default: |g:ttodo#file_exclude_rx|
      -i=RX, --task_include_rx=RX ... Default: |g:ttodo#task_include_rx|
      -x=RX, --task_exclude_rx=RX ... Default: |g:ttodo#task_exclude_rx|

    When the [!] is included show only important tasks.

    INITIAL FILTER is a |regexp| for filtering the task list. The 
    interpretation of INITIAL FILTER depends on the value of 
    |g:tlib#input#filter_mode|. The format of INITIAL FILTER depends on 
    the value of |g:ttodo#viewer|.


========================================================================
autoload/ttodo.vim~

                                                    *g:ttodo#dirs*
g:ttodo#dirs                   (default: [])
    List of directories where your todo.txt files reside.

    If the todotxt plugin is used, |g:todotxt#dir| is added to the 
    list.

                                                    *g:ttodo#file_pattern*
g:ttodo#file_pattern           (default: '*todo.txt')
    A glob pattern matching todo.txt files in |g:ttodo#dirs|.

                                                    *g:ttodo#file_include_rx*
g:ttodo#file_include_rx        (default: '')
    Consider only files matching this |regexp|.

                                                    *g:ttodo#file_exclude_rx*
g:ttodo#file_exclude_rx        (default: '[\/]done\.txt$')
    Ignore files matching this |regexp|.

                                                    *g:ttodo#task_include_rx*
g:ttodo#task_include_rx        (default: '')
    Include only tasks matching this |regexp| in the list.

                                                    *g:ttodo#task_exclude_rx*
g:ttodo#task_exclude_rx        (default: '')
    Exclude tasks matching this |regexp| from the list.

                                                    *g:ttodo#viewer*
g:ttodo#viewer                 (default: exists('g:loaded_tlib') ? 'tlib' : ':cwindow')
    Supported values:
      tlib ...... Use the tlib_vim plugin; the syntax of |:Ttodo|'s 
                  initial filter depends on the value of 
                  |g:tlib#input#filter_mode|
      :COMMAND .. E.g. `:cwindow`. In this case initial filter is a 
                  standard |regexp|.

                                                    *g:ttodo#sort*
g:ttodo#sort                   (default: 'pri,due,done,text')

                                                    *g:ttodo#prefs*
g:ttodo#prefs                  (default: {'default': {'hidden': 0, 'done': 0}, 'important': {'hidden': 0, 'done': 0, 'undated': 1, 'due': '2w', 'pri': 'A-C'}})
    A dictionary of configurations that can be invoked with the 
    `--pref=NAME` command line option from |:Ttodo|.

    If no preference is given, "default" is used.

                                                    *g:ttodo#default_pri*
g:ttodo#default_pri            (default: 'T')
    If a task has no priortiy defined, assign this default priortiy.

                                                    *g:ttodo#default_due*
g:ttodo#default_due            (default: strftime(g:tlib#date#date_format, localtime() + g:tlib#date#dayshift * 14))
    If a task has no due date defined, assign this default due date.

                                                    *g:ttodo#default_t*
g:ttodo#default_t              (default: '-31d')
    If a task has no threshold date defined, assign this default threshold date.

                                                    *g:ttodo#use_vikitasks*
g:ttodo#use_vikitasks          (default: exists('g:loaded_vikitasks') && g:loaded_vikitasks >= 102)

                                                    *g:ttodo#mapleader*
g:ttodo#mapleader              (default: '<LocalLeader>t')

                                                    *g:ttodo#debug*
g:ttodo#debug                  (default: 0)

                                                    *ttodo#ParseTask()*
ttodo#ParseTask(task)

                                                    *ttodo#InitListBuffer()*
ttodo#InitListBuffer()

                                                    *ttodo#FiletypeDetect()*
ttodo#FiletypeDetect(...)


========================================================================
autoload/ttodo/ftplugin.vim~

                                                    *g:ttodo#ftplugin#notef*
g:ttodo#ftplugin#notef         (default: 'notes/%s/%s-%s.md')

                                                    *g:ttodo#ftplugin#note_prefix*
g:ttodo#ftplugin#note_prefix   (default: 'file://')

                                                    *g:ttodo#ftplugin#edit_note*
g:ttodo#ftplugin#edit_note     (default: 'split')

                                                    *g:ttodo#ftplugin#add_at_eof*
g:ttodo#ftplugin#add_at_eof    (default: 0)
    If false, invoking the <cr> or <c-cr> map with a count will make 
    ttodo add a new task at the end of the file. Otherwise the task 
    will be added below the current line.
    If true, the meaning of the count is reversed.

                                                    *ttodo#ftplugin#WithVikitasks()*
ttodo#ftplugin#WithVikitasks(fn, ...)

                                                    *ttodo#ftplugin#Archive()*
ttodo#ftplugin#Archive(filename)

                                                    *ttodo#ftplugin#ArchiveCurrentBuffer()*
ttodo#ftplugin#ArchiveCurrentBuffer()

                                                    *ttodo#ftplugin#Note()*
ttodo#ftplugin#Note()

                                                    *ttodo#ftplugin#New()*
ttodo#ftplugin#New(move, copytags)



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
